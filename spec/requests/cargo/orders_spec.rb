require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/cargo/orders", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Cargo::Order. As you add validations to Cargo::Order, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a successful response" do
      Cargo::Order.create! valid_attributes
      get cargo_orders_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      order = Cargo::Order.create! valid_attributes
      get cargo_order_url(order)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_cargo_order_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      order = Cargo::Order.create! valid_attributes
      get edit_cargo_order_url(order)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Cargo::Order" do
        expect {
          post cargo_orders_url, params: { cargo_order: valid_attributes }
        }.to change(Cargo::Order, :count).by(1)
      end

      it "redirects to the created cargo_order" do
        post cargo_orders_url, params: { cargo_order: valid_attributes }
        expect(response).to redirect_to(cargo_order_url(Cargo::Order.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Cargo::Order" do
        expect {
          post cargo_orders_url, params: { cargo_order: invalid_attributes }
        }.to change(Cargo::Order, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post cargo_orders_url, params: { cargo_order: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested cargo_order" do
        order = Cargo::Order.create! valid_attributes
        patch cargo_order_url(order), params: { cargo_order: new_attributes }
        order.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the cargo_order" do
        order = Cargo::Order.create! valid_attributes
        patch cargo_order_url(order), params: { cargo_order: new_attributes }
        order.reload
        expect(response).to redirect_to(cargo_order_url(order))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        order = Cargo::Order.create! valid_attributes
        patch cargo_order_url(order), params: { cargo_order: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested cargo_order" do
      order = Cargo::Order.create! valid_attributes
      expect {
        delete cargo_order_url(order)
      }.to change(Cargo::Order, :count).by(-1)
    end

    it "redirects to the cargo_orders list" do
      order = Cargo::Order.create! valid_attributes
      delete cargo_order_url(order)
      expect(response).to redirect_to(cargo_orders_url)
    end
  end
end
